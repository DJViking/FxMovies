import java.time.format.DateTimeFormatter
import java.time.ZoneId

plugins {
    id 'java'
    id 'idea'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.1.0'
}

final def date = new Date()
final def buildDateFormatter = DateTimeFormatter.ofPattern("yyyy.MM.dd HH:mm:ss")
final def releaseFormatter = DateTimeFormatter.ofPattern("yyyMMddHHmmss")
ext {
    buildDateTime = date.toInstant().atZone(ZoneId.systemDefault()).format(buildDateFormatter);
    userName = System.properties['user.name']
    userHome = System.properties['user.home']
    createdBy = System.properties['java.version'] + " (" + System.properties['java.vendor'] + " " + System.properties['java.vm.version'] + ")"

    applicationVersion = project.version
    applicationRelease = "1"

    buildRelease = project.hasProperty("release")
    if (!buildRelease) {
        project.version = project.version + "-SNAPSHOT"
        applicationRelease = "SNAPSHOT" + date.toInstant().atZone(ZoneId.systemDefault()).format(releaseFormatter)
    } else {
        project.version = project.getProperty("tagVersion") + "-" + project.getProperty("tagRelease")
        applicationVersion = project.getProperty("tagVersion")
        applicationRelease = project.getProperty("tagRelease")
    }
}

dependencies {
    implementation(group: 'org.glassfish.jaxb', name: 'jaxb-runtime', version: '2.3.2')
    implementation(group: 'com.opencsv', name: 'opencsv', version: '4.4')

    testImplementation(group: junitJupiterGroup, name: 'junit-jupiter-api', version: junitJupiterVersion)
    testImplementation(group: junitJupiterGroup, name: 'junit-jupiter-engine', version: junitJupiterVersion)
    testImplementation(group: junitJupiterGroup, name: 'junit-jupiter-params', version: junitJupiterVersion)

    testRuntimeOnly(group: junitPlatformGroup, name: 'junit-platform-launcher', version: junitPlatformVersion)
    testRuntimeOnly(group: junitPlatformGroup, name: 'junit-platform-runner', version: junitPlatformVersion)

    testImplementation(group: textfxGroup, name: "testfx-core", version: textfxVersion)
    testImplementation(group: textfxGroup, name: "testfx-junit5", version: textfxVersion)

    testImplementation(group: mockitoGroup, name: 'mockito-core', version: mockitoVersion)
    testImplementation(group: mockitoGroup, name: 'mockito-junit-jupiter', version: mockitoVersion)
    testImplementation(group: 'org.hamcrest', name: 'hamcrest', version: '2.2')
}

repositories {
    mavenCentral()
}

application {
    mainModule = 'no.smeaworks.movies'
    mainClass = "no.smeaworks.movies.MoviesApplication"
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(25)
    }
    withJavadocJar()
    withSourcesJar()
    modularity.inferModulePath.set(true)
}

javafx {
    version = '25'
    modules = [
        "javafx.controls",
        "javafx.web",
        "javafx.media",
        "javafx.fxml"
    ]
}

javadoc {
    //exclude 'no/smeaworks/movies/jaxb/**'
}

jar {
    doFirst {
        manifest {
            attributes(
                'Implementation-Title': project.name,
                'Implementation-Version': project.version,
                'Implementation-Vendor': project.group,
                'Specification-Title': project.name,
                'Specification-Version': project.version,
                'Specification-Vendor': project.group,
                'Application-Name': applicationName,
                "Main-Class": application.mainClass,
                'Built-By': userName,
                'Build-Time': buildDateTime,
                'Created-By': createdBy,
                'Permissions': 'all-permissions',
                'Codebase': '*'
            )
        }
    }
}

test {
    useJUnitPlatform()
}
