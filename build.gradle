import java.time.format.DateTimeFormatter
import java.time.ZoneId

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath group: 'com.google.gradle', name: 'osdetector-gradle-plugin', version: '1.6.0'
        classpath group: 'org.javamodularity', name: 'moduleplugin', version: '1.1.1'
    }
}

plugins {
    id 'java'
    id 'eclipse'
    id 'application'
    id 'checkstyle'
    id 'jacoco'
    id "com.diffplug.gradle.spotless" version "3.15.0"
}

apply plugin: 'com.google.osdetector'
//apply plugin: "org.javamodularity.moduleplugin"

final Date date = new Date()
final def buildDateFormatter = DateTimeFormatter.ofPattern("yyyy.MM.dd HH:mm:ss")
final def releaseFormatter = DateTimeFormatter.ofPattern("yyyMMddHHmmss")
ext {
    buildDateTime = date.toInstant().atZone(ZoneId.systemDefault()).format(buildDateFormatter);

    applicationVersion = project.version
    applicationRelease = "1"

    buildRelease = project.hasProperty("release")
    if (!buildRelease) {
        project.version = project.version + "-SNAPSHOT"
        applicationRelease = "SNAPSHOT" + date.toInstant().atZone(ZoneId.systemDefault()).format(releaseFormatter)
    } else {
        project.version = project.getProperty("tagVersion") + "-" + project.getProperty("tagRelease")
        applicationVersion = project.getProperty("tagVersion")
        applicationRelease = project.getProperty("tagRelease")
    }

    platform = osdetector.os == 'osx' ? 'mac' : osdetector.os == 'windows' ? 'win' : osdetector.os

    moduleName = "no.smeaworks.movies"
}

mainClassName = "no.smeaworks.movies.MoviesApplication"

apply from: rootProject.file('spotless.gradle')
apply from: rootProject.file('modules.gradle')

repositories {
    mavenCentral()
}

final def openjfxGroup = "org.openjfx"
final def openjfxVersion = "11.0.1"

final def log4jGroup = 'org.apache.logging.log4j'
final def log4jVersion = '2.11.1'

final def junitJupiterGroup = 'org.junit.jupiter'
final def junitJupiterVersion = '5.3.1'

final def junitPlatformGroup = 'org.junit.platform'
final def junitPlatformVersion = '1.3.0'

final def textfxGroup = "org.testfx"
final def textfxVersion = "4.0.14-alpha"
dependencies {
    compile group: openjfxGroup, name: "javafx-base", version: openjfxVersion, classifier: platform
    compile group: openjfxGroup, name: "javafx-graphics", version: openjfxVersion, classifier: platform
    compile group: openjfxGroup, name: "javafx-controls", version: openjfxVersion, classifier: platform
    compile group: openjfxGroup, name: "javafx-media", version: openjfxVersion, classifier: platform
    compile group: openjfxGroup, name: "javafx-web", version: openjfxVersion, classifier: platform
    compile group: openjfxGroup, name: "javafx-fxml", version: openjfxVersion, classifier: platform

    compile group: log4jGroup, name: 'log4j-api', version: log4jVersion
    compile group: log4jGroup, name: 'log4j-core', version: log4jVersion
    compile group: 'com.lmax', name: 'disruptor', version:'3.3.7'

    testCompile group: junitJupiterGroup, name: 'junit-jupiter-api', version: junitJupiterVersion
    testRuntime group: junitJupiterGroup, name: 'junit-jupiter-engine', version: junitJupiterVersion
    testRuntime group: junitJupiterGroup, name: 'junit-jupiter-params', version: junitJupiterVersion

    testRuntimeOnly group: junitPlatformGroup, name: 'junit-platform-launcher', version: junitPlatformVersion

    testCompile group: textfxGroup, name: "testfx-core", version: textfxVersion
    testCompile group: textfxGroup, name: "testfx-junit5", version: textfxVersion
    testCompile group: textfxGroup, name: "openjfx-monocle", version: "jdk-11+26"
}

jar {
    doFirst {
        manifest {
            attributes(
                'Implementation-Title': project.name,
                'Implementation-Version': project.version,
                'Implementation-Vendor': project.group,
                'Specification-Title': project.name,
                'Specification-Version': project.version,
                'Specification-Vendor': project.group,
                "Main-Class": mainClassName,
                'Built-By': System.getProperty('user.name'),
                'Build-Time': buildDateTime,
                'Created-By': System.properties['java.version'] + " (" + System.properties['java.vendor'] + " " + System.properties['java.vm.version'] + ")",
                'Permissions': 'all-permissions',
                'Codebase': '*'
            )
        }
    }
}


task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives jar
    archives sourcesJar
    archives javadocJar
}

test {
    useJUnitPlatform()

    reports {
        html.enabled = true
    }
}

checkstyle {
    toolVersion '8.11'
}

jacoco {
    toolVersion = "0.8.2"
}

jacocoTestReport {
    reports {
        xml.enabled true
    }
}

javadoc {
    doFirst {
        options.addBooleanOption('html5', true)
    }
}

task createInstaller(type: Exec) {
    dependsOn installDist

    commandLine '/usr/java/jpackager/jpackager', 'create-image',
        '--verbose',
        '--echo-mode',
        '--name', project.name,
        '--version', applicationVersion,
        '--description', project.description,
        '--vendor', "Smeaworks Inc",
        '--install-dir', "/opt/smeaworks",
        '--category', "Some/Category/Application",
        '--module-path', new File(installDist.outputs.files.singleFile, "lib"),
        '--module', "${moduleName}/${mainClassName}",
        "--linux-rpm-license-type", "Commercial",
        "--linux-deb-maintainer", "Smeaworks Inc <sverre.moe@gmail.com>",
        '--output', "$buildDir/jfx/native"
}
