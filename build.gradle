import java.time.format.DateTimeFormatter
import java.time.ZoneId

plugins {
    id 'java'
    id 'eclipse'
    id 'application'
    id 'checkstyle'
    id 'jacoco'
    id "com.diffplug.gradle.spotless" version "3.15.0"
    id 'org.openjfx.javafxplugin' version '0.0.5'
}

apply(from: rootProject.file('spotless.gradle'))

final Date date = new Date()
final def buildDateFormatter = DateTimeFormatter.ofPattern("yyyy.MM.dd HH:mm:ss")
final def releaseFormatter = DateTimeFormatter.ofPattern("yyyMMddHHmmss")
ext {
    buildDateTime = date.toInstant().atZone(ZoneId.systemDefault()).format(buildDateFormatter);

    applicationVersion = project.version
    applicationRelease = "1"

    buildRelease = project.hasProperty("release")
    if (!buildRelease) {
        project.version = project.version + "-SNAPSHOT"
        applicationRelease = "SNAPSHOT" + date.toInstant().atZone(ZoneId.systemDefault()).format(releaseFormatter)
    } else {
        project.version = project.getProperty("tagVersion") + "-" + project.getProperty("tagRelease")
        applicationVersion = project.getProperty("tagVersion")
        applicationRelease = project.getProperty("tagRelease")
    }
}

mainClassName = "$moduleName/no.smeaworks.movies.MoviesApplication"

repositories {
    mavenCentral()
}

javafx {
    version = "11.0.+"

    modules = [
        'javafx.graphics',
        'javafx.controls',
        'javafx.media',
        'javafx.web',
        'javafx.fxml'
    ]
}

final def log4jGroup = 'org.apache.logging.log4j'
final def log4jVersion = '2.11.1'

final def junitJupiterGroup = 'org.junit.jupiter'
final def junitJupiterVersion = '5.3.2'

final def junitPlatformGroup = 'org.junit.platform'
final def junitPlatformVersion = '1.3.2'

final def textfxGroup = "org.testfx"
final def textfxVersion = "4.0.15-alpha"
dependencies {
    //implementation(group: 'org.controlsfx', name: 'controlsfx', version: '9.0.8')
    //implementation(group: 'com.jfoenix', name: 'jfoenix', version: '9.0.8')

    implementation(group: log4jGroup, name: 'log4j-api', version: log4jVersion)
    implementation(group: log4jGroup, name: 'log4j-core', version: log4jVersion)
    implementation(group: 'com.lmax', name: 'disruptor', version:'3.3.7')

    testImplementation(group: junitJupiterGroup, name: 'junit-jupiter-api', version: junitJupiterVersion)
    testRuntimeOnly(group: junitJupiterGroup, name: 'junit-jupiter-engine', version: junitJupiterVersion)
    testRuntimeOnly(group: junitJupiterGroup, name: 'junit-jupiter-params', version: junitJupiterVersion)

    testImplementation(group: textfxGroup, name: "testfx-core", version: textfxVersion)
    testImplementation(group: textfxGroup, name: "testfx-junit5", version: textfxVersion)
    testImplementation(group: textfxGroup, name: "openjfx-monocle", version: "jdk-11+26")
}

jar {
    doFirst {
        manifest {
            attributes(
                'Implementation-Title': project.name,
                'Implementation-Version': project.version,
                'Implementation-Vendor': project.group,
                'Specification-Title': project.name,
                'Specification-Version': project.version,
                'Specification-Vendor': project.group,
                "Main-Class": mainClassName,
                'Built-By': System.getProperty('user.name'),
                'Build-Time': buildDateTime,
                'Created-By': System.properties['java.version'] + " (" + System.properties['java.vendor'] + " " + System.properties['java.vm.version'] + ")",
                'Permissions': 'all-permissions',
                'Codebase': '*'
            )
        }
    }
}

test {
    useJUnitPlatform()

    reports {
        html.enabled = true
    }
}

checkstyle {
    toolVersion '8.14'
}

jacoco {
    toolVersion = "0.8.2"
}

jacocoTestReport {
    reports {
        xml.enabled true
    }
}

task createRuntime(type: Exec) {
    dependsOn installDist

    inputs.dir(installDist.outputs.files.singleFile)
    outputs.dir("${buildDir}/runtime")

    doFirst {
        delete "${buildDir}/runtime"
    }

    def libDir = new File(installDist.outputs.files.singleFile, "lib").path

    commandLine 'jlink',
        '--module-path', "/usr/java/jdk-11/jmods:${libDir}",
        '--add-modules', 'no.smeaworks.movies',
        '--output', "${buildDir}/runtime"
}

task createPackage(type: Exec) {
    dependsOn createRuntime

    commandLine 'jpackage', 'create-image',
        '--verbose',
        '--force',
        '--name', project.name,
        '--app-version', applicationVersion,
        '--module', "${mainClassName}",
        '--runtime-image', "${buildDir}/runtime",
        '--output', "${buildDir}/native"
}
