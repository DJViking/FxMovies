
plugins {
  id 'java'
  id 'eclipse'
  id 'application'
}

eclipse {
    classpath {
        file {
            whenMerged {
                entries.findAll { isModule(it) }.each { //(1)
                    it.entryAttributes['module'] = 'true'
                }

                entries.findAll { isSource(it) && isTestScope(it) }.each {
                    it.entryAttributes['test'] = 'true'
                }

                entries.findAll { isLibrary(it) && isTestScope(it) }.each {
                    it.entryAttributes['test'] = 'true'
                }
            }
        }

        defaultOutputDir = file('build')
        downloadSources = true
        downloadJavadoc = true
    }
}

boolean isLibrary(entry) { return entry.properties.kind.equals('lib') }
boolean isTestScope(entry) { return entry.entryAttributes.get('gradle_used_by_scope').equals('test'); }
boolean isModule(entry) { isLibrary(entry) && !isTestScope(entry); }
boolean isSource(entry) { return entry.properties.kind.equals('src'); }

group = 'no.smeaworks'
version = '1.0-SNAPSHOT'

description = """Movies"""

mainClassName = 'no.smeaworks.movies.MoviesApplication'
applicationDefaultJvmArgs = [ "-Djdk.gtk.verbose=true", "-Djdk.gtk.version=3" ]

sourceCompatibility = 10
targetCompatibility = 10

ext {
    moduleName = 'no.smeaworks.movies'
}

repositories {
     mavenLocal()
     mavenCentral()
}

final def junit5Group = 'org.junit.jupiter'
final def junit5Version = '5.2.0'
dependencies {
    compile group: 'org.controlsfx', name: 'controlsfx', version: '9.0.0'
    compile group: 'com.jfoenix', name: 'jfoenix', version: '9.0.4'
    compile group: 'org.jfxtras', name: 'jfxtras-controls', version: '9.0-r1'

    testCompile group: junit5Group, name: 'junit-jupiter-api', version: junit5Version
    testRuntime group: junit5Group, name: 'junit-jupiter-engine', version: junit5Version
}

compileJava {
    inputs.property("moduleName", moduleName)
    doFirst {
        println classpath.asPath
        options.compilerArgs = [
            '--module-path', classpath.asPath,
        ]
        classpath = files()
    }
}

compileTestJava {
    inputs.property("moduleName", moduleName)
    doFirst {
        options.compilerArgs = [
            '--module-path', classpath.asPath,
            '--add-modules', 'org.junit.jupiter.api',
            '--add-reads', "$moduleName=org.junit.jupiter.api",
            '--patch-module', "$moduleName=" + files(sourceSets.test.java.srcDirs).asPath,
        ]
        classpath = files()
    }
}

test {
    useJUnitPlatform()

    doFirst {
        jvmArgs = [
            '--module-path', classpath.asPath
        ]
    }

    reports {
        html.enabled = true
    }
}

jar {
    manifest {
        attributes("Main-Class": mainClassName)
    }
}
